"""
Script de configura√ß√£o inicial do Sistema de An√°lise Criminal
Vers√£o: 1.0.0
"""

import os
import subprocess
import sys
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üêç Verificando vers√£o do Python...")
    if sys.version_info < (3, 8):
        print(f"‚ùå Python {sys.version_info.major}.{sys.version_info.minor} n√£o suportado")
        print("   Vers√£o m√≠nima requerida: Python 3.8+")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} - OK")
    return True

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    print("üì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt", 
            "--upgrade", "--user"
        ])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        print("üí° Tente executar: pip install --upgrade pip")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("üìÅ Criando estrutura de diret√≥rios...")
    directories = [
        "data",
        ".streamlit",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado/verificado: {directory}/")

def create_security_key():
    """Cria chave de seguran√ßa se n√£o existir"""
    if not os.path.exists("security.key"):
        print("üîê Gerando chave de seguran√ßa...")
        try:
            from cryptography.fernet import Fernet
            key = Fernet.generate_key()
            with open("security.key", "wb") as key_file:
                key_file.write(key)
            print("‚úÖ Chave de seguran√ßa criada!")
        except ImportError:
            print("‚ùå Erro: cryptography n√£o instalada")
            return False
    else:
        print("‚úÖ Chave de seguran√ßa j√° existe!")
    return True

def check_data_file():
    """Verifica se o arquivo de dados existe"""
    data_path = "data/dataset_ocorrencias_delegacia_5.csv"
    if os.path.exists(data_path):
        print(f"‚úÖ Arquivo de dados encontrado: {data_path}")
        # Verificar tamanho do arquivo
        size_mb = os.path.getsize(data_path) / (1024 * 1024)
        print(f"   Tamanho: {size_mb:.1f} MB")
        return True
    else:
        print(f"‚ùå Arquivo de dados n√£o encontrado: {data_path}")
        print("üí° Coloque o arquivo CSV na pasta 'data/' para usar o sistema")
        return False

def setup_user():
    """Configura usu√°rio padr√£o"""
    print("üë§ Configurando usu√°rio padr√£o...")
    try:
        from security_utils import SecurityManager
        security_manager = SecurityManager()
        
        if not os.path.exists("users.pkl"):
            success = security_manager.create_user("admin", "admin123")
            if success:
                print("‚úÖ Usu√°rio admin criado: admin/admin123")
            else:
                print("‚ùå Erro ao criar usu√°rio admin")
                return False
        else:
            print("‚úÖ Base de usu√°rios j√° existe!")
        return True
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o de usu√°rio: {e}")
        return False

def run_initial_analysis():
    """Executa an√°lise inicial se poss√≠vel"""
    if os.path.exists("data/dataset_ocorrencias_delegacia_5.csv"):
        print("ü§ñ Executando an√°lise inicial...")
        try:
            subprocess.run([sys.executable, "advanced_analysis.py"], 
                         timeout=300, check=True)
            print("‚úÖ An√°lise inicial conclu√≠da!")
            return True
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è An√°lise demorou mais que esperado, mas pode ter funcionado")
            return True
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è Erro na an√°lise inicial - execute manualmente depois")
            return True
    else:
        print("‚ö†Ô∏è An√°lise inicial pulada - arquivo de dados n√£o encontrado")
        return True

def main():
    """Fun√ß√£o principal de setup"""
    print("üöÄ Sistema de An√°lise Criminal - Setup v1.0.0")
    print("=" * 60)
    
    # 1. Verificar Python
    if not check_python_version():
        return False
    
    # 2. Criar diret√≥rios
    create_directories()
    
    # 3. Instalar depend√™ncias
    if not install_requirements():
        print("‚ùå Falha na instala√ß√£o. Verifique sua conex√£o e tente novamente.")
        return False
    
    # 4. Criar chave de seguran√ßa
    if not create_security_key():
        return False
    
    # 5. Verificar arquivo de dados
    has_data = check_data_file()
    
    # 6. Configurar usu√°rio
    if not setup_user():
        return False
    
    # 7. Executar an√°lise inicial (se tiver dados)
    if has_data:
        run_initial_analysis()
    
    print("=" * 60)
    print("üéâ Configura√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Como usar:")
    print("1. üöÄ Iniciar: streamlit run enhanced_app.py")
    print("2. üåê Acessar: http://localhost:8501")
    print("3. üîë Login: admin / Senha: admin123")
    
    if not has_data:
        print("\n‚ö†Ô∏è Lembre-se de adicionar o dataset em data/")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå Setup cancelado pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
